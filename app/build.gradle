apply plugin: 'com.android.application'

def cfg = rootProject.ext.android // 配置
def libs = rootProject.ext.version // 库

android {
    compileSdkVersion cfg.compileVersion
    buildToolsVersion cfg.buildToolsVersion
    defaultConfig {
        applicationId cfg.package
        minSdkVersion cfg.minSdk
        targetSdkVersion cfg.targetSdk
        versionName cfg.version_name
        multiDexEnabled true
    }

    signingConfigs {
        release {
//            try {
            storeFile file("../app/keystore.jks")
            storePassword KEYSTORE_PASSWORD
            keyAlias key_Alias
            keyPassword KEY_PASSWORD
//            }
//            catch (ex) {
//                throw new InvalidUserDataException("You should define KEYSTORE_PASSWORD and KEY_PASSWORD in gradle.properties.")
//            }
        }

    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField "boolean", "LOG_DEBUG", "false"
            signingConfig signingConfigs.release
        }
        debug {
            buildConfigField "boolean", "LOG_DEBUG", "true"
//            signingConfig signingConfigs.release
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    packagingOptions {
        exclude 'META-INF/rxjava.properties'
    }
//    productFlavors {
//        dev {
//            minSdkVersion  21
//        }
//        prod {
//            minSdkVersion  14
//        }
//    }

    lintOptions {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }
}

repositories {
    maven { url "https://jitpack.io" }
}



dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    testImplementation 'junit:junit:4.12'
//    implementation project(':ptr-lib')
    implementation 'com.android.support:multidex:1.0.3'
    implementation "com.android.support:support-v4:${libs.supportVersion}"
    implementation "com.android.support:appcompat-v7:${libs.supportVersion}"
    implementation "com.android.support:design:${libs.supportVersion}"
    implementation "com.android.support:cardview-v7:${libs.supportVersion}"
    implementation "com.android.support:recyclerview-v7:${libs.supportVersion}"
    implementation 'com.jakewharton:butterknife:8.8.1'
    annotationProcessor 'com.jakewharton:butterknife-compiler:8.8.1'
    implementation "com.github.bumptech.glide:glide:${libs.glide}"
    implementation "jp.wasabeef:recyclerview-animators:${libs.recycler_animators}"
    implementation "de.hdodenhof:circleimageview:${libs.circleimageview}"
    implementation 'com.orhanobut:logger:2.2.0'
    implementation 'com.daimajia.swipelayout:library:1.2.0@aar'
    implementation 'com.zhy:okhttputils:2.6.2'

    implementation 'com.google.code.gson:gson:2.8.2'
    implementation 'com.apkfuns.logutils:library:1.4.2'
    //内存泄漏
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:1.5.4'
    releaseImplementation 'com.squareup.leakcanary:leakcanary-android-no-op:1.5.4'
    testImplementation 'com.squareup.leakcanary:leakcanary-android-no-op:1.5.4'

    implementation 'com.github.CymChad:BaseRecyclerViewAdapterHelper:2.9.30'
    implementation 'com.jrummyapps:html-builder:1.0.0'//
    implementation 'com.blankj:utilcode:1.5.1'
    implementation 'com.android.support.constraint:constraint-layout:1.1.2'

    //Retrofit和Rxjava
    implementation 'io.reactivex.rxjava2:rxjava:2.1.12'
    implementation 'io.reactivex.rxjava2:rxandroid:2.0.2'
    implementation 'com.squareup.retrofit2:retrofit:2.4.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.4.0'
    implementation 'com.squareup.retrofit2:adapter-rxjava2:2.4.0'
    implementation 'com.jakewharton.rxbinding2:rxbinding:2.0.0'
    implementation rootProject.ext.dependencies["logger"]

    def lifecycle_version = "1.1.1"
    // ViewModel and LiveData
    implementation "android.arch.lifecycle:extensions:$lifecycle_version"
    // alternatively - just ViewModel
    implementation "android.arch.lifecycle:viewmodel:$lifecycle_version" // use -ktx for Kotlin
    // alternatively - just LiveData
    implementation "android.arch.lifecycle:livedata:$lifecycle_version"
    // alternatively - Lifecycles only (no ViewModel or LiveData).
    //     Support library depends on this lightweight import
    implementation "android.arch.lifecycle:runtime:$lifecycle_version"
    annotationProcessor "android.arch.lifecycle:compiler:$lifecycle_version"
    // alternately - if using Java8, use the following instead of compiler
    implementation "android.arch.lifecycle:common-java8:$lifecycle_version"
    // optional - ReactiveStreams support for LiveData
    implementation "android.arch.lifecycle:reactivestreams:$lifecycle_version"
    // optional - Test helpers for LiveData
    testImplementation "android.arch.core:core-testing:$lifecycle_version"

    //Paging对RxJava2的原生支持
    implementation "android.arch.paging:rxjava2:1.0.1"
}

//android.applicationVariants.all { variant ->
//    variant.outputs.all { output ->
//        if (variant.buildType.debuggable) {
////            println("测试包不修改")
////            outputFileName = "qfang_android_v" + versionName + "_" + "${variant.flavorName}.apk"
////            println("自定义的日子:======" + getData());
//            return
//        }
//        def versionName = versionName.replace('.', '_')
//        outputFileName = "qfang_android_v" + versionName + "_" + "${variant.flavorName}.apk"
//        println outputFileName
//    }
//}

